%%

var yylval : YYSType;



implementation

uses msgslib;

function TLexer.get_char : AnsiChar;
var
  i: integer;
begin
  if (bufptr = 0) and (yycolno <= length(yyInputText)) then
  begin
    yyline := yyinputText;
    Inc(yylineno);
    yycolno := 1;
    buf[1]  := nl;
    for i := 1 to length(yyline) do
      buf[i + 1] := yyline[length(yyline) - i + 1];
    Inc(bufptr, length(yyline) + 1);
  end;
  if bufptr > 0 then
  begin
    Result := buf[bufptr];
    Dec(bufptr);
    Inc(yycolno);
  end
  else
  begin
    yycolno := 1;
    Result := #0;
  end
end;

procedure TLexer.unget_char(c: AnsiChar);
begin
  (*if bufptr = max_chars then
    fatal('input buffer overflow');*)
  Inc(bufptr);
  Dec(yycolno);
  buf[bufptr] := c;
end;

procedure TLexer.put_char(c: AnsiChar);
begin

end(*put_char*);

procedure TLexer.yyclear;
begin
  inherited;
  yycolno := 1;
  bufptr := 0;
end;

function TLexer.yywrap: boolean;
begin
  Result := True;
end;

procedure TParser.yyerror(msg: string);
begin
  msg := 'ERROR: '+ msg;
  setLength(yyerrmsgs,length(yyerrmsgs) + 1);
  yyerrmsgs[High(yyerrmsgs)] := msg;
end (* yyerrmsg *);

procedure TParser.yyacceptmessage(msg: string);
begin
  msg := 'ACCEPT: '+ msg;
  setLength(yymiscmsgs,length(yymiscmsgs) + 1);
  yymiscmsgs[High(yymiscmsgs)] := msg;
end(*yyacceptmsg*);

function con(value: extended): NodePointer;
begin
  new(result);
  result^.kind := 0;
  New(result^.conNode);
  result^.conNode^.value := value
end;

function stcon(value: string): NodePointer;
begin
  new(result);
  result^.kind := 1;
  New(result^.stNode);
  result^.stNode^.value := value
end;

function boolcon(value: boolean): NodePointer;
begin
  new(result);
  result^.kind := 5;
  New(result^.boolNode);
  result^.boolNode^.value := value
end;

function DBName(Name: string): NodePointer;
begin
  new(result);
  result^.kind := 3;
  New(result^.stNode);
  result^.stNode^.value := Name
end;

function DBcomment(comment: string): NodePointer;
begin
  new(result);
  result^.kind := 4;
  New(result^.stNode);
  result^.stNode^.value := comment
end;

function stOption(option: string): NodePointer;
begin
  new(result);
  result^.kind := 6;
  New(result^.stNode);
  result^.stNode^.value := option
end;

function nullcon(): NodePointer;
begin
  new(result);
  result^.kind := 7
end;

function opr(Mnemonic: Integer; stMnemonic: string): NodePointer; overload;
begin
  new(result);
  result^.kind := 2;
  New(result^.oprNode);
  result^.oprNode^.Mnemonic := Mnemonic;
  result^.oprNode^.stMnemonic := stMnemonic;
  result^.oprNode^.op := nil
end;

function opr(Mnemonic: Integer; stMnemonic: string; op: array of NodePointer): NodePointer; overload;
var
  i: Integer;
begin
  new(result);
  result^.kind := 2;
  New(result^.oprNode);
  result^.oprNode^.Mnemonic := Mnemonic;
  result^.oprNode^.stMnemonic := stMnemonic;
  SetLength(result^.oprNode^.op,length(op));
  for i := Low(op) to High(op) do
    result^.oprNode^.op[i] := op[i]
end;

function TParser.parse() : integer;

var
  yystate, yysp, yyn : Integer;
  yys : array [1..yymaxdepth] of Integer;
  yyv : array [1..yymaxdepth] of YYSType;
  yyval : YYSType;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
%%
begin
  (* actions: *)
  case yyruleno of
%%
  end;
end(*yyaction*);

(* parse table: *)

%%

const _error = 256; (* error token *)

function yyact(state, sym : Integer; var act : Integer) : Boolean;
  (* search action table *)
  var k : Integer;
  begin
    k := yyal[state];
    while (k<=yyah[state]) and (yya[k].sym<>sym) do inc(k);
    if k>yyah[state] then
      yyact := false
    else
      begin
        act := yya[k].act;
        yyact := true;
      end;
  end(*yyact*);

function yygoto(state, sym : Integer; var nstate : Integer) : Boolean;
  (* search goto table *)
  var k : Integer;
  begin
    k := yygl[state];
    while (k<=yygh[state]) and (yyg[k].sym<>sym) do inc(k);
    if k>yygh[state] then
      yygoto := false
    else
      begin
        nstate := yyg[k].act;
        yygoto := true;
      end;
  end(*yygoto*);

function yycharsym(i : Integer) : String;
begin
  if (i >= 1) and (i <= 255) then
    begin
      if i < 32 then
        begin
          if i = 9 then
            Result := #39'\t'#39
          else if i = 10 then
            Result := #39'\f'#39
          else if i = 13 then
            Result := #39'\n'#39
          else
            Result := #39'\0x' + IntToHex(i,2) + #39;
        end
      else
        Result := #39 + Char(i) + #39;
      Result := ' literal ' + Result;
    end
  else
    begin
      if i < -1 then
        Result := ' unknown'
      else if i = -1 then
        Result := ' token $accept'
      else if i = 0 then
        Result := ' token $eof'
      else if i = 256 then
        Result := ' token $error'
{$ifdef yyextradebug}
      else if i <= yymaxtoken then
        Result := ' token ' + yytokens[yychar].tokenname
      else
        Result := ' unknown token';
{$else}
      else
        Result := ' token';
{$endif}
    end;
  Result := Result + ' ' + IntToStr(yychar);
end;

label parse1, next, error, errlab, shift, reduce, accept, abort;

begin(*yyparse*)

  (* initialize: *)

  yystate := 0; yychar := -1; yynerrs := 0; yyerrflag := 0; yysp := 0;

parse1:

  (* push state and value: *)

  inc(yysp);
  if yysp>yymaxdepth then
    begin
      yyerror('yyparse stack overflow');
      goto abort;
    end;
  yys[yysp] := yystate; yyv[yysp] := yyval;

next:

  if (yyd[yystate]=0) and (yychar=-1) then
    (* get next symbol *)
    begin
      yychar := lexer.parse(); if yychar<0 then yychar := 0;
    end;

  {$IFDEF YYDEBUG}writeln('state ', yystate, yycharsym(yychar));{$ENDIF}

  (* determine parse action: *)

  yyn := yyd[yystate];
  if yyn<>0 then goto reduce; (* simple state *)

  (* no default action; search parse table *)

  if not yyact(yystate, yychar, yyn) then goto error
  else if yyn>0 then                      goto shift
  else if yyn<0 then                      goto reduce
  else                                    goto accept;

error:

  (* error; start error recovery: *)

  if yyerrflag=0 then yyerror('syntax error');

errlab:

  if yyerrflag=0 then inc(yynerrs);     (* new error *)

  if yyerrflag<=2 then                  (* incomplete recovery; try again *)
    begin
      yyerrflag := 3;
      (* uncover a state with shift action on error token *)
      while (yysp>0) and not ( yyact(yys[yysp], _error, yyn) and
                               (yyn>0) ) do
        begin
          {$IFDEF YYDEBUG}
            if yysp>1 then
              writeln('error recovery pops state ', yys[yysp], ', uncovers ',
                      yys[yysp-1])
            else
              writeln('error recovery fails ... abort');
          {$ENDIF}
          dec(yysp);
        end;
      if yysp=0 then goto abort; (* parser has fallen from stack; abort *)
      yystate := yyn;            (* simulate shift on error *)
      goto parse1;
    end
  else                                  (* no shift yet; discard symbol *)
    begin
      {$IFDEF YYDEBUG}writeln('error recovery discards ' + yycharsym(yychar));{$ENDIF}
      if yychar=0 then goto abort; (* end of input; abort *)
      yychar := -1; goto next;     (* clear lookahead char and try again *)
    end;

shift:

  (* go to new state, clear lookahead character: *)

  yystate := yyn; yychar := -1; yyval := yylval;
  if yyerrflag>0 then dec(yyerrflag);

  goto parse1;

reduce:

  (* execute action, pop rule from stack, and go to next state: *)

  {$IFDEF YYDEBUG}writeln('reduce ' + IntToStr(-yyn) {$IFDEF YYEXTRADEBUG} + ' rule ' + yyr[-yyn].symname {$ENDIF});{$ENDIF}

  yyflag := yyfnone; yyaction(-yyn);
  dec(yysp, yyr[-yyn].len);
  if yygoto(yys[yysp], yyr[-yyn].sym, yyn) then yystate := yyn;

  (* handle action calls to yyaccept, yyabort and yyerror: *)

  case yyflag of
    yyfaccept : goto accept;
    yyfabort  : goto abort;
    yyferror  : goto errlab;
  end;

  goto parse1;

accept:

  Result := 0; exit;

abort:

  Result := 1; exit;

end(*yyparse*);
